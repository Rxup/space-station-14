using Content.Client.UserInterface.Controls;
using Content.Shared.Backmen.Economy.WageConsole;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Backmen.Economy.WageConsole.UI;

[GenerateTypedNameReferences]
public sealed partial class WageConsoleWindow : FancyWindow
{
    private readonly EntityUid _owner;
    private readonly WageConsoleComponent _comp;
    private readonly IPrototypeManager _proto;
    private readonly string _stationName;

    public event Action<uint> OnWageRowEdit = u => { };
    public event Action<uint> OnBonusWage = u => { };

    public void Update(UpdateWageConsoleUi updateWageConsoleUi)
    {
        SourcesList.RemoveAllChildren();
        foreach (var row in updateWageConsoleUi.Records)
        {
            var wageRow = new WageRow()
            {
                Id = row.Id
            };
            wageRow.FromName.Text = Loc.GetString("wageconsole-row", ("name", row.FromName), ("account", row.FromAccount));
            wageRow.ToName.Text = Loc.GetString("wageconsole-row", ("name", row.ToName), ("account", row.ToAccount));
            wageRow.Wage.Text = row.Wage.ToString();
            wageRow.EditBtn.OnPressed += EditBtnOnOnPressed;
            wageRow.BonusBtn.OnPressed += BonusBtnOnOnPressed;

            SourcesList.Children.Add(wageRow);
        }
    }

    private void BonusBtnOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        if (obj.Button.Parent?.Parent?.Parent is not WageRow row)
        {
            return;
        }

        OnBonusWage.Invoke(row.Id);
    }

    private void EditBtnOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        if (obj.Button.Parent?.Parent?.Parent is not WageRow row)
        {
            return;
        }

        OnWageRowEdit.Invoke(row.Id);
    }

    public WageConsoleWindow(EntityUid owner, WageConsoleComponent comp, IPrototypeManager proto, string stationName)
    {
        _owner = owner;
        _comp = comp;
        _proto = proto;
        _stationName = stationName;

        RobustXamlLoader.Load(this);

        var msg = new FormattedMessage();
        msg.AddText(stationName);
        StationName.SetMessage(msg);

        OpenCentered();
    }
}
