using Content.Shared.Backmen.Economy.Eftpos;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Backmen.Economy.Eftpos.UI;

    [GenerateTypedNameReferences]
    public sealed partial class EftposMenu : DefaultWindow
    {
        public event Action<FixedPoint2?> OnChangeValue = _ => {};
        public event Action OnResetValue = () => { };
        public event Action<string?> OnChangeLinkedAccount = _ => { };
        public event Action OnResetLinkedAccount = () => { };
        public event Action OnSwipeCard = () => { };
        public event Action OnLock = () => { };
        public EftposMenu()
        {
            RobustXamlLoader.Load(this);
            ValueLineEdit.OnTextEntered += OnValueLineEditTextEntered;
            ValueButton.OnButtonDown += OnValueButtonButtonDown;
            LinkedAccountLineEdit.OnTextEntered += OnLinkedAccountLineEditTextEntered;
            LinkedAccountButton.OnButtonDown += OnLinkedAccounButtonButtonDown;
            SwipeCardButton.OnButtonDown += OnSwipeCardButtonButtonDown;
            LockButton.OnButtonDown += OnLockButtonButtonDown;
        }
        public void UpdateState(SharedEftposComponent.EftposBoundUserInterfaceState state)
        {
            UpdateValue(state.Value);
            UpdateLinkedAccount(state.LinkedAccountNumber, state.LinkedAccountName);
            UpdateLocked(state.IsLocked);
            SymbolLabel.Text = state.CurrencySymbol ?? "";
        }

        private void OnValueLineEditTextEntered(LineEdit.LineEditEventArgs args)
        {
            if (TryGetValueFromValueLineEdit(out var value))
                OnChangeValue.Invoke(value);
        }
        private void OnValueButtonButtonDown(BaseButton.ButtonEventArgs args)
        {
            OnResetValue.Invoke();
        }
        private void OnLinkedAccountLineEditTextEntered(LineEdit.LineEditEventArgs args)
        {
            OnChangeLinkedAccount.Invoke(LinkedAccountLineEdit.Text);
        }
        private void OnLinkedAccounButtonButtonDown(BaseButton.ButtonEventArgs args)
        {
            OnResetLinkedAccount.Invoke();
        }
        private void OnSwipeCardButtonButtonDown(BaseButton.ButtonEventArgs args)
        {
            OnSwipeCard.Invoke();
        }
        private void OnLockButtonButtonDown(BaseButton.ButtonEventArgs args)
        {
            if (!ValueButton.Visible && TryGetValueFromValueLineEdit(out var value))
            {
                OnChangeValue.Invoke(value);
            }

            if (!LinkedAccountButton.Visible)
            {
                OnChangeLinkedAccount.Invoke(!string.IsNullOrEmpty(LinkedAccountLineEdit.Text) ? LinkedAccountLineEdit.Text : "auto");
            }

            OnLock.Invoke();
        }
        private bool TryGetValueFromValueLineEdit(out FixedPoint2 value)
        {
            value = 0;
            if(int.TryParse(ValueLineEdit.Text, out int result))
            {
                value = FixedPoint2.New(result);
                return true;
            }
            ValueLineEdit.Clear();
            return false;
        }
        private void UpdateLinkedAccount(string? linkedAccountNumber, string? linkedAccountName)
        {
            bool isValid = linkedAccountNumber != null;
            LinkedAccountLineEdit.Visible = !isValid;
            SymbolLabel.Visible = LinkedAccountButton.Visible = isValid;
            if (isValid)
            {
                string s = string.Empty;
                if (linkedAccountName != null) s = $"{linkedAccountName} ";
                LinkedAccountButton.Text = s + $"#{linkedAccountNumber}";
            }
        }
        private void UpdateValue(FixedPoint2? value)
        {
            bool isValid = value != null;
            ValueLineEdit.Visible = !isValid;
            ValueButton.Visible = isValid;
            if (isValid)
            {
                ValueButton.Text = value.ToString();
            }
        }
        private void UpdateLocked(bool isLocked)
        {
            SwipeCardButton.Visible = LockButton.Disabled = isLocked;
            SwipeCardButton.Disabled = LockButton.Visible = !isLocked;
            //ValueButton.Disabled = LinkedAccountButton.Disabled = isLocked;
        }
    }
