using Content.Shared.Backmen.Economy.ATM;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Backmen.Economy.ATM.UI;

    [GenerateTypedNameReferences]
    public sealed partial class ATMMenu : DefaultWindow
    {
        private ATMEnterPinWindow? _enterPinWindow;
        public event Action<LineEdit.LineEditEventArgs, FixedPoint2>? OnWithdrawAttempt;
        public ATMMenu()
        {
            RobustXamlLoader.Load(this);
            WithdrawButton.OnButtonDown += _ => OnWithdrawButtonDown();
        }

        public void UpdateBalanceState(AtmBoundUserInterfaceBalanceState state)
        {
            AccountBalance.Text = state.BankAccountBalance != null
                ? Loc.GetString("atm-ui-account-balance", ("balance", state.BankAccountBalance), ("currencySymbol", state.CurrencySymbol ?? ""))
                : Loc.GetString("atm-ui-account-balance", ("balance", "%ERR!"), ("currencySymbol", state.CurrencySymbol ?? ""));
        }
        public void UpdateState(AtmBoundUserInterfaceState state)
        {
            WelcomeLabel.Text = state.IdCardFullName != null
                ? Loc.GetString("atm-ui-welcome-label-w-name", ("name", state.IdCardFullName))
                : Loc.GetString("atm-ui-default-welcome-label");
            IdCardButton.Text = state.IdCardEntityName != null
                ? state.IdCardEntityName
                : Loc.GetString("atm-ui-no-card-label");
            AccountBalance.Text = state.BankAccountBalance != null
                ? Loc.GetString("atm-ui-account-balance", ("balance", state.BankAccountBalance), ("currencySymbol", state.CurrencySymbol ?? ""))
                : Loc.GetString("atm-ui-account-balance", ("balance", "%ERR!"), ("currencySymbol", state.CurrencySymbol ?? ""));
            ErrorLabel.Visible = state.IsCardPresent && !state.HaveAccessToBankAccount;

            WithdrawSlider.MinValue = 1;
            WithdrawSlider.MaxValue = state.BankAccountBalance?.Int() ?? 1;
            WithdrawSlider.Visible = ShowWithdraw.Visible = state.BankAccountBalance > 0;
            ShowInteractions.Visible = state.IsCardPresent && state.HaveAccessToBankAccount;
            WithdrawButton.Disabled = !ShowWithdraw.Visible;
        }
        private void OnWithdrawButtonDown()

        {
            if (_enterPinWindow != null && _enterPinWindow.IsOpen)
            {
                _enterPinWindow.MoveToFront();
                return;
            }

            _enterPinWindow = new ATMEnterPinWindow();
            _enterPinWindow.OpenCentered();

            _enterPinWindow.PinLineEdit.OnTextEntered += args => OnWithdrawAttempt?.Invoke(args, GetValueFromWithdrawInput());
            _enterPinWindow.PinLineEdit.OnTextEntered += _ => _enterPinWindow.Close();
        }
        private FixedPoint2 GetValueFromWithdrawInput()
        {
            return FixedPoint2.New(WithdrawSlider.Value);
        }
    }
