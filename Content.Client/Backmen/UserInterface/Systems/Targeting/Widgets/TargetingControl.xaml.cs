using System.Linq;
using Content.Shared.Backmen.Surgery.Wounds;
using Content.Shared.Backmen.Targeting;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Backmen.UserInterface.Systems.Targeting.Widgets;

[GenerateTypedNameReferences]
public sealed partial class TargetingControl : UIWidget
{
    private readonly TargetingUIController _controller;
    private readonly Dictionary<TargetBodyPart, TextureButton> _bodyPartControls;
    private readonly Dictionary<TargetBodyPart, TextureRect> _partStatusControls;

    public TargetingControl()
    {
        RobustXamlLoader.Load(this);
        _controller = UserInterfaceManager.GetUIController<TargetingUIController>();

        _bodyPartControls = new Dictionary<TargetBodyPart, TextureButton>
        {
            // TODO: ADD EYE AND MOUTH TARGETING
            { TargetBodyPart.Head, HeadButton },
            { TargetBodyPart.Chest, ChestButton },
            { TargetBodyPart.Groin, GroinButton },
            { TargetBodyPart.LeftArm, LeftArmButton },
            { TargetBodyPart.LeftHand, LeftHandButton },
            { TargetBodyPart.RightArm, RightArmButton },
            { TargetBodyPart.RightHand, RightHandButton },
            { TargetBodyPart.LeftLeg, LeftLegButton },
            { TargetBodyPart.LeftFoot, LeftFootButton },
            { TargetBodyPart.RightLeg, RightLegButton },
            { TargetBodyPart.RightFoot, RightFootButton },
        };

        _partStatusControls = new Dictionary<TargetBodyPart, TextureRect>
        {
            { TargetBodyPart.Head, DollHead },
            { TargetBodyPart.Chest, DollTorso },
            { TargetBodyPart.Groin, DollGroin },
            { TargetBodyPart.LeftArm, DollLeftArm },
            { TargetBodyPart.LeftHand, DollLeftHand },
            { TargetBodyPart.RightArm, DollRightArm },
            { TargetBodyPart.RightHand, DollRightHand },
            { TargetBodyPart.LeftLeg, DollLeftLeg },
            { TargetBodyPart.LeftFoot, DollLeftFoot },
            { TargetBodyPart.RightLeg, DollRightLeg },
            { TargetBodyPart.RightFoot, DollRightFoot },
        };

        foreach (var bodyPartButton in _bodyPartControls)
        {
            bodyPartButton.Value.MouseFilter = MouseFilterMode.Stop;
            bodyPartButton.Value.OnPressed += _ => SetActiveBodyPart(bodyPartButton.Key);
        }

        TargetDoll.Texture = Theme.ResolveTexture("target_doll");
        BodyDoll.Texture = Theme.ResolveTexture("SlotBackground");
    }

    private void SetActiveBodyPart(TargetBodyPart bodyPart) => _controller.CycleTarget(bodyPart);

    public void SetBodyPartsVisible(TargetBodyPart bodyPart)
    {
        foreach (var bodyPartButton in _bodyPartControls)
        {
            bodyPartButton.Value.Children.First().Visible = bodyPartButton.Key == bodyPart;
        }
    }

    public void SetTextures(Dictionary<TargetBodyPart, WoundableSeverity> state)
    {
        foreach (var (bodyPart, integrity) in state)
        {
            string enumName = Enum.GetName(typeof(TargetBodyPart), bodyPart) ?? "Unknown";
            int enumValue = (int) integrity;
            var texture = new SpriteSpecifier.Rsi(new ResPath($"/Textures/Interface/Targeting/Status/{enumName.ToLowerInvariant()}.rsi"), $"{enumName.ToLowerInvariant()}_{enumValue}");
            _partStatusControls[bodyPart].Texture = _controller.GetTexture(texture);
        }
    }

    protected override void OnThemeUpdated()
    {
        TargetDoll.Texture = Theme.ResolveTexture("target_doll");
        BodyDoll.Texture = Theme.ResolveTexture("SlotBackground");
    }

    public void SetTargetDollVisible(bool visible) => Visible = visible;
}
