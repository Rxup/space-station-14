using Content.Client.Pinpointer.UI;
using Content.Client.UserInterface.Controls;
using Content.Shared.Backmen.StationAI.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Backmen.StationAI.UI;

[GenerateTypedNameReferences]
public sealed partial class AICameraList : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    public event Action<NetEntity>? WarpToCamera;

    private readonly EntityUid _owner;
    private readonly EntityUid _eye;
    public AICameraList(EntityUid? mapUid, EntityUid? trackedEntity, EntityUid eye)
    {
        _owner = trackedEntity ?? EntityUid.Invalid;
        _eye = eye;
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        NavMapScreen.MapUid = mapUid;

        var msg = new FormattedMessage();
        if (_entityManager.TryGetComponent<MetaDataComponent>(mapUid, out var metadata))
        {
            msg.AddText(metadata.EntityName);
        }
        else
        {
            msg.AddText(Loc.GetString("ai-warp-menu-no-cameras"));
        }
        StationName.SetMessage(msg);

        NavMapScreen.TrackedEntitySelectedAction += ItemSelected;
        UpdateCameras();
    }

    public void UpdateCameras()
    {
        if (!_eye.Valid || !_entityManager.TryGetComponent<AIEyeComponent>(_eye, out var aiEye))
            return;

        NavMapScreen.TrackedEntities.Clear();

        foreach (var (camera,pos) in aiEye.FollowsCameras)
        {
            var texture = _entityManager.System<SpriteSystem>().Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));
            var isSame = _entityManager.TryGetEntity(camera, out var camUid) && camUid == aiEye.Camera;
            var blip = new NavMapBlip(_entityManager.GetCoordinates(pos), texture, isSame ? Color.DarkRed : Color.Cyan, isSame, true);
            NavMapScreen.TrackedEntities[camera] = blip;
        }

        NavMapScreen.ForceNavMapUpdate();
    }

    private void ItemSelected(NetEntity? obj)
    {
        if(obj != null)
            WarpToCamera?.Invoke(obj.Value);
    }
}
