using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Shared.Backmen.StationAI;
using Robust.Client.UserInterface.Controls;
using Content.Client.UserInterface.Controls;

namespace Content.Client.Backmen.StationAI.UI;

[GenerateTypedNameReferences]
public sealed partial class AICameraList : FancyWindow
{
    private List<EntityUid> _cameras = new();
    public event Action? TryUpdateCameraList;
    public event Action<EntityUid>? WarpToCamera;

    public AICameraList()
    {
        RobustXamlLoader.Load(this);

        SearchBar.OnTextChanged += (_) => FillCameraList(SearchBar.Text);
        Refresh.OnPressed += (_) => UpdateCameraList();
    }

    private void ItemSelected(ItemList.ItemListSelectedEventArgs obj)
    {
        var meta = obj.ItemList[obj.ItemIndex].Metadata;
        if (meta == null ||
            meta is not AICameraComponent camera ||
            camera.Enabled == false)
            return;

        WarpToCamera?.Invoke(camera.Owner);
    }

    private void FillCameraList(string? filter = null)
    {
        foreach (var child in SubnetList.Children.ToArray())
        {
            child.Dispose();
        }

        if (_cameras.Count == 0)
        {
            Text.Text = Loc.GetString("ai-warp-menu-no-cameras");
            return;
        }

        Text.Text = Loc.GetString("ai-warp-menu-select-camera");

        var namedCameraList = new List<(string, List<string>, EntityUid)>();
        var categoryList = new List<string>();

        foreach (var uid in _cameras.ToArray())
        {
            if (!IoCManager.Resolve<IEntityManager>().TryGetComponent<AICameraComponent>(uid, out var camera)) continue;

            if (camera.Enabled == false) continue;

            namedCameraList.Add((camera.CameraName, camera.CameraCategories, uid));
        }

        namedCameraList.Sort((a, b) => a.Item1.CompareTo(b.Item1));

        foreach (var (name, categories, uid) in namedCameraList.ToArray())
        {
            if (categories.Count == 0) continue;

            foreach (var category in categories.ToArray().Where(category => !categoryList.Contains(category.Replace("SurveillanceCamera", ""))))
            {
                categoryList.Add(category.Replace("SurveillanceCamera", ""));
            }
        }

        categoryList.Sort();

        foreach (var tab in categoryList.ToArray().Select(category => new ItemList()
                 {
                     Name = category
                 }))
        {
            tab.OnItemSelected += ItemSelected;
            SubnetList.AddChild(tab);
        }

        foreach (var (name, categories, uid) in namedCameraList.ToArray())
        {
            if (!string.IsNullOrEmpty(filter) && !name.ToLowerInvariant().Contains(filter.Trim().ToLowerInvariant()))
                continue;

            if (!IoCManager.Resolve<IEntityManager>().TryGetComponent<AICameraComponent>(uid, out var camera)) continue;

            if (camera.Enabled == false) continue;

            foreach (var category in categories.ToArray())
            foreach (var child in SubnetList.Children.ToArray())
            {
                if (child.Name != category.Replace("SurveillanceCamera", "")) continue;
                if (child is not ItemList list) continue;

                ItemList.Item cameraItem = new(list)
                {
                    Metadata = camera,
                    Text = camera.CameraName
                };

                list.Add(cameraItem);
            }
        }
    }

    public void UpdateCameraList(List<EntityUid>? cameras = null)
    {
        if (cameras == null)
        {
            TryUpdateCameraList?.Invoke();
            return;
        }

        _cameras = cameras;
        FillCameraList();
    }
}
