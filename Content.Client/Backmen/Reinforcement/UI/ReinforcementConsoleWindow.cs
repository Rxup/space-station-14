using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Systems;
using Content.Shared.Backmen.Reinforcement;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Shared.Prototypes;
using Robust.Shared.Random;

namespace Content.Client.Backmen.Reinforcement.UI;

[GenerateTypedNameReferences]
public sealed partial class ReinforcementConsoleWindow : FancyWindow
{
    private readonly EntityUid _owner;
    private readonly int _compMaxStringLength;
    private readonly IPlayerManager _playerManager;
    private readonly IPrototypeManager _proto;
    private readonly IRobustRandom _random;
    private readonly AccessReaderSystem _accessReader;

    public ReinforcementConsoleWindow(EntityUid owner, int compMaxStringLength, IPlayerManager playerManager, IPrototypeManager proto, IRobustRandom random, AccessReaderSystem accessReader)
    {
        _owner = owner;
        _compMaxStringLength = compMaxStringLength;
        _playerManager = playerManager;
        _proto = proto;
        _random = random;
        _accessReader = accessReader;
    }

    public event Action<uint,uint> OnKeySelected = (u, c) => { };
    public event Action<string> OnBriefChange = (b) => { };
    public event Action OnStartCall = () => { };

    public void Update(UpdateReinforcementUi updateReinforcementUi)
    {
        var isActive = updateReinforcementUi.IsActive;

        // update brief

        // reset grid rows
        if (isActive)
        {
            // render grid row with extended not editable info
            // update callBy and show
            // disable button send
        }
        else
        {
            var counts = new Dictionary<uint, int>();
            foreach (var (member,_,_,_) in updateReinforcementUi.Members)
            {
                counts.TryAdd(member,0);
                counts[member]++;
            }
            // render grid row with plus minus id
            // hide callBy
            // enable button send
        }
    }
}
