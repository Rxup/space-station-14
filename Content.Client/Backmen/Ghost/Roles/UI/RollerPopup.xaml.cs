using System;
using System.Globalization;
using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Backmen.CCVar;
using Content.Shared.Backmen.Ghost.Roles.Components;
using Content.Shared.Backmen.Ghost.Roles.Events;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Backmen.Ghost.Roles.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class RollerPopup : Control
    {
        private readonly Entity<GhostVisRollerComponent> _roll;
        [Dependency] private readonly IGameTiming _gameTiming = default!;
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        [Dependency] private readonly IPlayerManager _player = default!;
        [Dependency] private readonly IEntityManager _entity = default!;

        public RollerPopup(Entity<GhostVisRollerComponent> roll)
        {
            _roll = roll;
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            Stylesheet = IoCManager.Resolve<IStylesheetManager>().SheetSpace;

            Modulate = Color.White.WithAlpha(0.75f);
        }

        public void UpdateData()
        {
            VoteTitle.Text = _roll.Comp.Title;
            VoteCaller.Text = _roll.Comp.Desc;
            var msg = new FormattedMessage();
            if(!string.IsNullOrEmpty(_roll.Comp.Rule))
                msg.AddMarkup(_roll.Comp.Rule);
            Rules.SetMessage(msg);

            SourcesList.RemoveAllChildren();
            var li = _roll.Comp.Bids.OrderByDescending(x => x.Value);
            foreach (var (name, bid) in li)
            {
                var row = new RollerRow
                {
                    Entity = _roll
                };
                row.UserName.Text = name;
                row.UserBid.Text = bid switch
                {
                    <= -1f => Loc.GetString("ghostroller-bid-exit"),
                    0f => Loc.GetString("ghostroller-bid-penalty"),
                    _ => bid.ToString(CultureInfo.InvariantCulture)
                };

                var vis = _player.LocalSession?.Name == name;
                row.Icon.Visible = vis;
                if (vis)
                {
                    row.Icon.OnPressed += e =>
                    {
                        _entity.EntityNetManager?.SendSystemNetworkMessage(new CancelGhostRollerEvent
                        {
                            Id = _roll.Comp.CurrentId
                        });
                    };
                }


                SourcesList.AddChild(row);
            }
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            var end = TimeSpan.FromSeconds(_cfg.GetCVar(CCVars.GhostRollerTime));
            // Logger.Debug($"{_gameTiming.ServerTime}, {_vote.StartTime}, {_vote.EndTime}");
            var endTime = _roll.Comp.StartDate + end;
            var timeLeft = endTime - _gameTiming.CurTime;
            if (timeLeft < TimeSpan.Zero)
                timeLeft = TimeSpan.Zero;

            // Round up a second.
            //timeLeft = TimeSpan.FromSeconds(Math.Ceiling(timeLeft.TotalSeconds));
            var a =  _gameTiming.CurTime.TotalSeconds - _roll.Comp.StartDate.TotalSeconds;
            var b = end.TotalSeconds;

            TimeLeftBar.Value = Math.Min(1, (float) (a / b));

            TimeLeftText.Text = $"{timeLeft:m\\:ss}";
        }
    }
}
